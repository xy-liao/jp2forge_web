# JP2Forge Web - Docker Environment Configuration Template
# Copy this file to .env and modify as needed for Docker deployment
# These values match the defaults in docker-compose.yml

# Django settings
SECRET_KEY=your-very-long-random-secret-key-here-change-this-in-production
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,[::1]
DJANGO_SETTINGS_MODULE=jp2forge_web.settings

# Database settings (MUST match docker-compose.yml defaults)
DATABASE_URL=postgres://jp2forge:jp2forge_password@db:5432/jp2forge
DB_ENGINE=django.db.backends.postgresql
DB_NAME=jp2forge
DB_USER=jp2forge
DB_PASSWORD=jp2forge_password
DB_HOST=db
DB_PORT=5432

# PostgreSQL credentials (used by docker-compose.yml)
POSTGRES_USER=jp2forge
POSTGRES_PASSWORD=jp2forge_password
POSTGRES_DB=jp2forge

# Redis password (MUST match docker-compose.yml defaults)
REDIS_PASSWORD=redis_password

# Celery settings
CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
CELERY_RESULT_BACKEND=django-db

# File upload limits (in bytes)
# 104857600 bytes = 100MB
MAX_UPLOAD_SIZE=104857600

# JP2Forge settings
JP2FORGE_OUTPUT_DIR=/app/media/jobs
JP2FORGE_REPORT_DIR=/app/media/reports
JP2FORGE_MOCK_MODE=False

# Email settings (for development, using console backend)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
EMAIL_HOST=localhost
EMAIL_PORT=25
EMAIL_USE_TLS=False
EMAIL_HOST_USER=test@example.com
EMAIL_HOST_PASSWORD=testpassword
DEFAULT_FROM_EMAIL=JP2Forge Web <noreply@example.com>

# Security settings for Docker
SECURE_SSL_REDIRECT=False
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False
SECURE_HSTS_SECONDS=0
SECURE_HSTS_INCLUDE_SUBDOMAINS=False
SECURE_HSTS_PRELOAD=False
SECURE_DOCKER_ENVIRONMENT=true

# Docker-specific settings
CREATE_SUPERUSER=true

# IMPORTANT SECURITY NOTES:
# 1. Change the SECRET_KEY to a unique random string
# 2. For production, change all passwords from defaults
# 3. Set DEBUG=False in production
# 4. Restrict ALLOWED_HOSTS to your actual domain names
# 5. Enable SSL/TLS settings if using HTTPS