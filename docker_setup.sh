#!/bin/bash
# JP2Forge Web Docker Setup Script
# This script automates the setup process for JP2Forge web application

# Color codes for better readability
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}====== JP2Forge Web Docker Setup ======${NC}"
echo -e "${BLUE}This script will set up JP2Forge Web with all required services.${NC}"

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo -e "${RED}Error: Docker is not installed. Please install Docker first.${NC}"
    exit 1
fi

# Check if Docker Compose is installed
if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}Error: Docker Compose is not installed. Please install Docker Compose first.${NC}"
    exit 1
fi

# Check if Docker is running
if ! docker info &> /dev/null; then
    echo -e "${RED}Error: Docker daemon is not running. Please start Docker and try again.${NC}"
    exit 1
fi

# Check if Docker has enough resources
echo -e "${YELLOW}Checking Docker resources...${NC}"
# No specific check here, but good to remind users that Docker needs adequate resources

# Check if any JP2Forge containers are already running
if docker ps --format '{{.Names}}' | grep -q "jp2forge"; then
    echo -e "${YELLOW}Found existing JP2Forge containers running.${NC}"
    echo -e "${YELLOW}Stopping existing containers for clean setup...${NC}"
    docker-compose down
fi

# Check if .env file exists, create from example if not
if [ ! -f ".env" ]; then
    if [ -f ".env.example" ]; then
        echo -e "${YELLOW}Creating .env file from .env.example...${NC}"
        cp .env.example .env
        
        # Generate a random SECRET_KEY
        if command -v python3 &> /dev/null; then
            echo -e "${YELLOW}Generating secure SECRET_KEY...${NC}"
            SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_urlsafe(50))")
            
            # Replace the placeholder with the generated key
            if [[ "$OSTYPE" == "darwin"* ]]; then
                # macOS sed requires an empty string for -i
                sed -i '' "s/SECRET_KEY=change_me_in_production/SECRET_KEY=$SECRET_KEY/g" .env
            else
                # Linux sed
                sed -i "s/SECRET_KEY=change_me_in_production/SECRET_KEY=$SECRET_KEY/g" .env
            fi
        fi
        
        echo -e "${GREEN}Created .env file successfully.${NC}"
    else
        echo -e "${YELLOW}Creating default .env file...${NC}"
        cat > .env << EOF
# JP2Forge Web - Environment Configuration
# ---------------------------------------------------------------------
# Generated by docker_setup.sh script

# Django settings
# ---------------------------------------------------------------------
SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_urlsafe(50))")
DEBUG=1
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# Database settings
# ---------------------------------------------------------------------
DB_ENGINE=postgresql
DB_NAME=jp2forge
DB_USER=jp2forge
DB_PASSWORD=jp2forge_password
DB_HOST=db
DB_PORT=5432
DATABASE_URL=postgres://jp2forge:jp2forge_password@db:5432/jp2forge

# PostgreSQL credentials (used by docker-compose.yml)
POSTGRES_USER=jp2forge
POSTGRES_PASSWORD=jp2forge_password
POSTGRES_DB=jp2forge

# Celery and Redis settings
# ---------------------------------------------------------------------
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=django-db

# File upload limits
# ---------------------------------------------------------------------
MAX_UPLOAD_SIZE=10485760  # 10MB

# JP2Forge settings
# ---------------------------------------------------------------------
JP2FORGE_OUTPUT_DIR=media/jobs
JP2FORGE_REPORT_DIR=media/reports
JP2FORGE_MOCK_MODE=False

# Required dependencies 
# ---------------------------------------------------------------------
# These are pre-installed in the Docker image:
# - Redis (for Celery task queue)
# - ExifTool (for metadata extraction)
# - markdown (for documentation display)

# Security settings - disable for local Docker development
# ---------------------------------------------------------------------
SECURE_SSL_REDIRECT=False
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False
SECURE_HSTS_SECONDS=0
SECURE_HSTS_INCLUDE_SUBDOMAINS=False
SECURE_HSTS_PRELOAD=False

# Additional settings for production
# ---------------------------------------------------------------------
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1] 0.0.0.0
DJANGO_SETTINGS_MODULE=jp2forge_web.settings_prod
EOF
        echo -e "${GREEN}Created default .env file successfully.${NC}"
    fi
else
    echo -e "${GREEN}.env file already exists.${NC}"
fi

# Stop any existing containers, remove volumes for clean setup
echo -e "${YELLOW}Stopping any existing containers and cleaning up...${NC}"
docker-compose down -v

# Build and start the containers
echo -e "${YELLOW}Building and starting Docker containers...${NC}"
docker-compose up -d --build

# Check if containers are up
echo -e "${YELLOW}Checking if containers are running properly...${NC}"
sleep 5

if ! docker-compose ps | grep -q "Up"; then
    echo -e "${RED}Error: Some containers failed to start. Checking logs...${NC}"
    docker-compose logs
    echo -e "${YELLOW}You may need to check Docker settings or free up resources.${NC}"
    exit 1
fi

# Wait for database to be ready
echo -e "${YELLOW}Waiting for database to be ready...${NC}"
echo -e "${YELLOW}This may take up to 20 seconds...${NC}"

attempt=1
max_attempts=10
ready=false

while [ $attempt -le $max_attempts ] && [ "$ready" = false ]; do
    echo -e "${YELLOW}Attempt $attempt/$max_attempts: Checking database connection...${NC}"
    
    if docker-compose exec -T db pg_isready -q; then
        ready=true
        echo -e "${GREEN}Database is ready!${NC}"
    else
        echo -e "${YELLOW}Database not ready yet. Waiting...${NC}"
        sleep 3
        attempt=$((attempt+1))
    fi
done

if [ "$ready" = false ]; then
    echo -e "${RED}Database failed to become ready after multiple attempts.${NC}"
    echo -e "${YELLOW}Checking database logs:${NC}"
    docker-compose logs db
    echo -e "${RED}Setup failed. Please check the database configuration.${NC}"
    exit 1
fi

# Apply database migrations
echo -e "${YELLOW}Applying database migrations...${NC}"
docker-compose exec -T web python manage.py migrate

# Check if migration was successful
if [ $? -eq 0 ]; then
    echo -e "${GREEN}Database migrations applied successfully.${NC}"
else
    echo -e "${RED}Error applying migrations. Will retry in 5 seconds...${NC}"
    sleep 5
    docker-compose exec -T web python manage.py migrate
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Database migrations applied successfully on second attempt.${NC}"
    else
        echo -e "${RED}Error applying migrations. Please check database connection.${NC}"
        echo -e "${YELLOW}Checking web container logs:${NC}"
        docker-compose logs web
        echo -e "${RED}Setup failed. Please resolve the issues and try again.${NC}"
        exit 1
    fi
fi

# Check Redis connection
echo -e "${YELLOW}Checking Redis connection...${NC}"
if docker-compose exec -T redis redis-cli ping | grep -q "PONG"; then
    echo -e "${GREEN}Redis is running correctly.${NC}"
else
    echo -e "${RED}Redis is not responding. Celery tasks may not work.${NC}"
    echo -e "${YELLOW}Checking Redis logs:${NC}"
    docker-compose logs redis
fi

# Collect static files
echo -e "${YELLOW}Collecting static files...${NC}"
docker-compose exec -T web python manage.py collectstatic --noinput

# Create media directories
echo -e "${YELLOW}Creating media directories...${NC}"
docker-compose exec -T web mkdir -p media/jobs media/reports

# Ask if user wants to create a superuser
echo -e "${YELLOW}Do you want to create a superuser? (y/n)${NC}"
read -r create_user

if [[ "$create_user" =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}Creating superuser...${NC}"
    docker-compose exec web python manage.py createsuperuser
else
    echo -e "${YELLOW}Creating default admin user (username: admin, password: admin123)...${NC}"
    docker-compose exec -T web python -c "
import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jp2forge_web.settings')
django.setup()
from django.contrib.auth.models import User
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
    print('Default superuser created successfully')
else:
    print('Superuser already exists')
"
fi

# Display success message
echo -e "${GREEN}====== Setup Complete! ======${NC}"
echo -e "${GREEN}JP2Forge web application is now running.${NC}"
echo -e "${GREEN}You can access it at: http://localhost:8000${NC}"
echo -e "${GREEN}Default admin credentials (if you didn't create a custom user):${NC}"
echo -e "${GREEN}Username: admin${NC}"
echo -e "${GREEN}Password: admin123${NC}"

# Helpful commands
echo -e "${YELLOW}====== Helpful Commands ======${NC}"
echo -e "${YELLOW}View logs: ${NC}docker-compose logs -f"
echo -e "${YELLOW}Stop containers: ${NC}docker-compose down"
echo -e "${YELLOW}Rebuild and restart: ${NC}docker-compose up -d --build"
echo -e "${YELLOW}Get a shell: ${NC}docker-compose exec web bash"

# Check the status of the containers
echo -e "${YELLOW}Docker container status:${NC}"
docker-compose ps