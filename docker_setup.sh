#!/bin/bash
# JP2Forge Web Docker Setup Script

# Color definitions for better readability
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}==============================================${NC}"
echo -e "${BLUE}     JP2FORGE WEB DOCKER SETUP SCRIPT        ${NC}"
echo -e "${BLUE}==============================================${NC}"

# Step 1: Check prerequisites
echo -e "\n${YELLOW}Checking prerequisites...${NC}"

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo -e "${RED}Error: Docker is not installed.${NC}"
    echo -e "Please install Docker from https://www.docker.com/get-started"
    exit 1
fi
echo -e "${GREEN}✓ Docker is installed${NC}"

# Check if Docker Compose is installed
if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}Error: Docker Compose is not installed.${NC}"
    echo -e "Please install Docker Compose from https://docs.docker.com/compose/install/"
    exit 1
fi
echo -e "${GREEN}✓ Docker Compose is installed${NC}"

# Check if Docker is running
if ! docker info &> /dev/null; then
    echo -e "${RED}Error: Docker daemon is not running.${NC}"
    echo -e "Please start Docker and try again."
    exit 1
fi
echo -e "${GREEN}✓ Docker daemon is running${NC}"

# Step 2: Cleanup existing containers if needed
echo -e "\n${YELLOW}Checking for existing JP2Forge containers...${NC}"
if docker ps -a | grep -q "jp2forge_"; then
    echo -e "${YELLOW}Found existing JP2Forge containers. Stopping and removing...${NC}"
    docker-compose down -v &> /dev/null
    docker-compose down &> /dev/null
    docker rm -f $(docker ps -a | grep "jp2forge_" | awk '{print $1}') 2>/dev/null || true
    echo -e "${GREEN}✓ Cleaned up existing containers${NC}"
else
    echo -e "${GREEN}✓ No existing containers found${NC}"
fi

# Step 3: Set up environment file
echo -e "\n${YELLOW}Setting up environment file...${NC}"
if [ ! -f ".env" ]; then
    echo -e "Creating new .env file..."
    
    # Generate random password and secret key
    DB_PASSWORD=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1)
    SECRET_KEY=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9!@#$%^&*()_+{}[]|;:,.<>?=' | fold -w 50 | head -n 1)
    
    cat > .env << EOF
# JP2Forge Web Docker Environment Configuration
# Auto-generated by docker_setup.sh

# Django Settings
SECRET_KEY=${SECRET_KEY}
DEBUG=1
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 0.0.0.0 [::1]
DJANGO_SETTINGS_MODULE=jp2forge_web.settings

# Database Settings
DB_ENGINE=django.db.backends.postgresql
DB_NAME=jp2forge
DB_USER=jp2forge
DB_PASSWORD=${DB_PASSWORD}
DB_HOST=db
DB_PORT=5432

# PostgreSQL Settings
POSTGRES_USER=jp2forge
POSTGRES_PASSWORD=${DB_PASSWORD}
POSTGRES_DB=jp2forge

# Celery Settings
CELERY_BROKER_URL=redis://redis:6379/0
CELERY_RESULT_BACKEND=django-db

# File Upload Settings
MAX_UPLOAD_SIZE=10485760

# JP2Forge Settings
JP2FORGE_OUTPUT_DIR=/app/media/jobs
JP2FORGE_REPORT_DIR=/app/media/reports
JP2FORGE_MOCK_MODE=False

# Security Settings (disable for development)
SECURE_SSL_REDIRECT=False
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False
SECURE_HSTS_SECONDS=0
SECURE_HSTS_INCLUDE_SUBDOMAINS=False
SECURE_HSTS_PRELOAD=False

# Allow all hosts for local development
ALLOWED_HOSTS=*
EOF
    echo -e "${GREEN}✓ Created new .env file${NC}"
else
    echo -e "${YELLOW}Using existing .env file${NC}"
    echo -e "${YELLOW}⚠ If you experience issues, you may need to update your .env file manually${NC}"
fi

# Step 4: Make scripts executable
echo -e "\n${YELLOW}Setting file permissions...${NC}"
# Ensure docker-entrypoint.sh exists and is executable
if [ ! -f "docker-entrypoint.sh" ]; then
    echo -e "${RED}Warning: docker-entrypoint.sh does not exist.${NC}"
    echo -e "${YELLOW}Creating a basic docker-entrypoint.sh script...${NC}"
    
    cat > docker-entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Wait for PostgreSQL to become available
until python -c "import sys, psycopg2; sys.exit(0 if psycopg2.connect(dbname='${POSTGRES_DB:-jp2forge}', user='${POSTGRES_USER:-jp2forge}', password='${POSTGRES_PASSWORD:-jp2forge_password}', host='${DB_HOST:-db}', port='${DB_PORT:-5432}') else 1)"; do
  >&2 echo "PostgreSQL is unavailable - waiting..."
  sleep 1
done
>&2 echo "PostgreSQL is up - continuing..."

# Wait for Redis to become available
until nc -z redis 6379; do
  >&2 echo "Redis is unavailable - waiting..."
  sleep 1
done
>&2 echo "Redis is up - continuing..."

# Create necessary directories
mkdir -p /app/media/jobs /app/media/reports /app/staticfiles /app/logs

# Apply database migrations
python manage.py migrate

# Collect static files
python manage.py collectstatic --noinput

# Create superuser if requested
if [ "$CREATE_SUPERUSER" = "true" ]; then
  python -c "
import os
import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jp2forge_web.settings')
django.setup()
from django.contrib.auth.models import User
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
    print('Default superuser created successfully')
else:
    print('Superuser already exists')
"
fi

# Execute the command passed to docker run
exec "$@"
EOF
fi

# Ensure docker-entrypoint.sh is executable
chmod +x docker-entrypoint.sh
chmod +x *.sh
echo -e "${GREEN}✓ Made scripts executable${NC}"

# Check requirements.txt to make sure git is needed
echo -e "\n${YELLOW}Checking requirements.txt...${NC}"
if grep -q "git+" requirements.txt; then
    echo -e "${GREEN}✓ Found Git-based dependencies in requirements.txt${NC}"
else
    echo -e "${YELLOW}Note: No Git-based dependencies detected in requirements.txt${NC}"
fi

# Step 5: Build and start containers
echo -e "\n${YELLOW}Building and starting containers...${NC}"
echo -e "${YELLOW}This may take several minutes on first run...${NC}"

docker-compose build
if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Docker build failed.${NC}"
    echo -e "${YELLOW}Please check the error messages above and fix the issues.${NC}"
    exit 1
fi
echo -e "${GREEN}✓ Build completed successfully${NC}"

echo -e "${YELLOW}Starting containers...${NC}"
docker-compose up -d
if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Failed to start containers.${NC}"
    echo -e "${YELLOW}Please check the error messages above and fix the issues.${NC}"
    exit 1
fi
echo -e "${GREEN}✓ Containers started successfully${NC}"

# Step 6: Wait for services to be ready
echo -e "\n${YELLOW}Waiting for services to be ready...${NC}"
echo -e "This may take up to 30 seconds..."

# Wait for database to be ready
attempt=1
max_attempts=15
while [ $attempt -le $max_attempts ]; do
    echo -ne "${YELLOW}Checking database connection (attempt $attempt/$max_attempts)...${NC}\r"
    if docker-compose exec -T db pg_isready &> /dev/null; then
        echo -e "${GREEN}✓ Database is ready                                     ${NC}"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        echo -e "${RED}Error: Database did not become ready in time.${NC}"
        echo -e "${YELLOW}Showing database logs:${NC}"
        docker-compose logs db
        echo -e "\n${RED}Setup failed. Please check the database configuration.${NC}"
        exit 1
    fi
    
    attempt=$((attempt+1))
    sleep 2
done

# Wait for web server to be ready
attempt=1
max_attempts=15
while [ $attempt -le $max_attempts ]; do
    echo -ne "${YELLOW}Checking web server (attempt $attempt/$max_attempts)...${NC}\r"
    if docker-compose exec -T web curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 | grep -q -e "200" -e "302" -e "404"; then
        echo -e "${GREEN}✓ Web server is ready                                 ${NC}"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        echo -e "${RED}Warning: Could not confirm web server is ready.${NC}"
        echo -e "${YELLOW}Showing web container logs:${NC}"
        docker-compose logs web
        echo -e "\n${YELLOW}The setup will continue, but please check the logs above for any issues.${NC}"
        break
    fi
    
    attempt=$((attempt+1))
    sleep 2
done

# Check if superuser exists
echo -e "\n${YELLOW}Creating default admin user...${NC}"
docker-compose exec -T web python -c "
import django
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jp2forge_web.settings')
django.setup()
from django.contrib.auth.models import User
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
    print('Default superuser created successfully')
else:
    print('Superuser already exists')
"

# Step 7: Show success message and helpful tips
echo -e "\n${GREEN}==============================================${NC}"
echo -e "${GREEN}       JP2FORGE WEB SETUP COMPLETE!            ${NC}"
echo -e "${GREEN}==============================================${NC}"
echo -e "\n${GREEN}The JP2Forge Web application is now running at:${NC}"
echo -e "${BLUE}http://localhost:8000${NC}"
echo -e "\n${GREEN}Default admin login:${NC}"
echo -e "Username: ${BLUE}admin${NC}"
echo -e "Password: ${BLUE}admin123${NC}"

echo -e "\n${YELLOW}USEFUL COMMANDS:${NC}"
echo -e "View all logs:            ${BLUE}docker-compose logs${NC}"
echo -e "View specific logs:       ${BLUE}docker-compose logs web${NC}"
echo -e "Follow logs in real-time: ${BLUE}docker-compose logs -f${NC}"
echo -e "Restart all services:     ${BLUE}docker-compose restart${NC}"
echo -e "Stop all services:        ${BLUE}docker-compose down${NC}"
echo -e "Start services:           ${BLUE}docker-compose up -d${NC}"
echo -e "Access Django shell:      ${BLUE}docker-compose exec web python manage.py shell${NC}"
echo -e "Access database:          ${BLUE}docker-compose exec db psql -U jp2forge jp2forge${NC}"

echo -e "\n${YELLOW}CONTAINER STATUS:${NC}"
docker-compose ps