#!/bin/bash
# JP2Forge Web Docker Setup Script
# Version: 0.1.6 (June 21, 2025)
# Updated for comprehensive documentation and Docker modernization

# Color definitions for better readability
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}==============================================${NC}"
echo -e "${BLUE}     JP2FORGE WEB DOCKER SETUP SCRIPT        ${NC}"
echo -e "${BLUE}     Version 0.1.6                           ${NC}"
echo -e "${BLUE}==============================================${NC}"

# Step 1: Check prerequisites
echo -e "\n${YELLOW}Checking prerequisites...${NC}"

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo -e "${RED}Error: Docker is not installed.${NC}"
    echo -e "Please install Docker from https://www.docker.com/get-started"
    exit 1
fi
echo -e "${GREEN}✓ Docker is installed${NC}"

# Check Docker version (need at least 20.10.0 for newer features)
DOCKER_VERSION=$(docker version --format '{{.Server.Version}}' 2>/dev/null || docker version | grep 'Version:' | head -n 1 | awk '{print $2}')
if [[ -z "$DOCKER_VERSION" ]]; then
    echo -e "${YELLOW}⚠ Could not determine Docker version${NC}"
else
    echo -e "${GREEN}✓ Docker version: ${DOCKER_VERSION}${NC}"
    # Check if Docker Compose v2 plugin is being used
    if docker compose version &> /dev/null; then
        echo -e "${GREEN}✓ Using Docker Compose v2 plugin${NC}"
        COMPOSE_COMMAND="docker compose"
    else
        # Fall back to docker-compose if available
        if command -v docker-compose &> /dev/null; then
            echo -e "${GREEN}✓ Using docker-compose standalone${NC}"
            COMPOSE_COMMAND="docker-compose"
        else
            echo -e "${RED}Error: Neither Docker Compose v2 plugin nor docker-compose is available.${NC}"
            echo -e "Please install Docker Compose: https://docs.docker.com/compose/install/"
            exit 1
        fi
    fi
fi

# Check if Docker is running
if ! docker info &> /dev/null; then
    echo -e "${RED}Error: Docker daemon is not running.${NC}"
    echo -e "Please start Docker and try again."
    exit 1
fi
echo -e "${GREEN}✓ Docker daemon is running${NC}"

# Step 2: Security check
echo -e "\n${YELLOW}Performing basic security checks...${NC}"

# Check if images need updates
echo -e "Checking for outdated base images..."
docker pull python:3.12-slim &> /dev/null
docker pull postgres:16-alpine &> /dev/null
docker pull redis:7.2-alpine &> /dev/null
echo -e "${GREEN}✓ Base images updated${NC}"

# Step 3: Cleanup existing containers if needed
echo -e "\n${YELLOW}Checking for existing JP2Forge containers...${NC}"
if docker ps -a | grep -q "jp2forge_"; then
    echo -e "${YELLOW}Found existing JP2Forge containers. Stopping and removing...${NC}"
    $COMPOSE_COMMAND down -v &> /dev/null
    $COMPOSE_COMMAND down &> /dev/null
    docker rm -f $(docker ps -a | grep "jp2forge_" | awk '{print $1}') 2>/dev/null || true
    echo -e "${GREEN}✓ Cleaned up existing containers${NC}"
else
    echo -e "${GREEN}✓ No existing containers found${NC}"
fi

# Step 4: Set up environment file
echo -e "\n${YELLOW}Setting up environment file...${NC}"
if [ ! -f ".env" ]; then
    echo -e "Creating new .env file..."
    
    # Generate random secret key and secure passwords
    SECRET_KEY=$(cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9!@#$%^&*()_+{}[]|;:,.<>?=' | fold -w 60 | head -n 1)
    
    # Generate secure passwords using Python
    echo -e "${YELLOW}Generating secure passwords...${NC}"
    POSTGRES_PASSWORD=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))" 2>/dev/null || openssl rand -base64 32 | tr -d '=' | tr '/' '_' | tr '+' '-')
    REDIS_PASSWORD=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))" 2>/dev/null || openssl rand -base64 32 | tr -d '=' | tr '/' '_' | tr '+' '-')
    
    cat > .env << EOF
# JP2Forge Web Docker Environment Configuration
# Auto-generated by docker_setup.sh - Version 0.1.5

# Django Settings
SECRET_KEY=${SECRET_KEY}
DEBUG=0
DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 0.0.0.0 [::1]
DJANGO_SETTINGS_MODULE=jp2forge_web.settings
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,[::1]

# Database Settings (secure passwords auto-generated)
DATABASE_URL=postgres://jp2forge:${POSTGRES_PASSWORD}@db:5432/jp2forge
DB_ENGINE=django.db.backends.postgresql
DB_NAME=jp2forge
DB_USER=jp2forge
DB_PASSWORD=${POSTGRES_PASSWORD}
DB_HOST=db
DB_PORT=5432

# PostgreSQL Settings (secure password auto-generated)
POSTGRES_USER=jp2forge
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_DB=jp2forge

# Redis Settings (secure password auto-generated)
REDIS_PASSWORD=${REDIS_PASSWORD}

# Celery Settings
CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
CELERY_RESULT_BACKEND=django-db

# File Upload Settings
MAX_UPLOAD_SIZE=10485760

# JP2Forge Settings
JP2FORGE_OUTPUT_DIR=/app/media/jobs
JP2FORGE_REPORT_DIR=/app/media/reports
JP2FORGE_MOCK_MODE=False

# Security Settings
SECURE_SSL_REDIRECT=False
SESSION_COOKIE_SECURE=False
CSRF_COOKIE_SECURE=False
SECURE_HSTS_SECONDS=0
SECURE_HSTS_INCLUDE_SUBDOMAINS=False
SECURE_HSTS_PRELOAD=False
SECURE_DOCKER_ENVIRONMENT=true

# Docker settings
CREATE_SUPERUSER=true

# Allow all hosts for development - restrict in production!
ALLOWED_HOSTS=*
EOF
    echo -e "${GREEN}✓ Created new .env file with enhanced security${NC}"
else
    echo -e "${YELLOW}Using existing .env file${NC}"
    echo -e "${YELLOW}⚠ If you experience issues, you may need to update your .env file manually${NC}"
    
    # Validate environment variables are set
    echo -e "\n${YELLOW}Validating environment configuration...${NC}"
    if [ -f ".env" ]; then
        # Check if required variables are present
        if grep -q "POSTGRES_PASSWORD=" .env && [ "$(grep "POSTGRES_PASSWORD=" .env | cut -d'=' -f2 | wc -c)" -gt 10 ]; then
            echo -e "${GREEN}✓ PostgreSQL password is set${NC}"
        else
            echo -e "${YELLOW}⚠ PostgreSQL password may not be properly configured${NC}"
        fi
        
        if grep -q "REDIS_PASSWORD=" .env && [ "$(grep "REDIS_PASSWORD=" .env | cut -d'=' -f2 | wc -c)" -gt 10 ]; then
            echo -e "${GREEN}✓ Redis password is set${NC}"
        else
            echo -e "${YELLOW}⚠ Redis password may not be properly configured${NC}"
        fi
        
        if grep -q "DATABASE_URL=" .env; then
            echo -e "${GREEN}✓ Database URL is configured${NC}"
        else
            echo -e "${YELLOW}⚠ DATABASE_URL may not be properly configured${NC}"
        fi
    fi
fi

# Step 5: Make scripts executable
echo -e "\n${YELLOW}Setting file permissions...${NC}"
# Ensure all scripts are executable
chmod +x *.sh
echo -e "${GREEN}✓ Made scripts executable${NC}"

# Step 6: Check requirements.txt to make sure git is included
echo -e "\n${YELLOW}Checking requirements.txt...${NC}"
if grep -q "git+" requirements.txt; then
    echo -e "${GREEN}✓ Found Git-based dependencies in requirements.txt${NC}"
else
    echo -e "${YELLOW}Note: No Git-based dependencies detected in requirements.txt${NC}"
fi

# Step 7: Clear any existing environment variables that might interfere
echo -e "\n${YELLOW}Clearing any conflicting environment variables...${NC}"
unset POSTGRES_USER POSTGRES_PASSWORD POSTGRES_DB REDIS_PASSWORD
unset DB_NAME DB_USER DB_PASSWORD DB_HOST DB_PORT
echo -e "${GREEN}✓ Environment cleaned${NC}"

# Step 8: Build and start containers
echo -e "\n${YELLOW}Building and starting containers...${NC}"
echo -e "${YELLOW}This may take several minutes on first run...${NC}"

$COMPOSE_COMMAND build
if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Docker build failed.${NC}"
    echo -e "${YELLOW}Please check the error messages above and fix the issues.${NC}"
    exit 1
fi
echo -e "${GREEN}✓ Build completed successfully${NC}"

echo -e "${YELLOW}Starting containers...${NC}"
$COMPOSE_COMMAND up -d
if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Failed to start containers.${NC}"
    echo -e "${YELLOW}Please check the error messages above and fix the issues.${NC}"
    exit 1
fi
echo -e "${GREEN}✓ Containers started successfully${NC}"

# Step 9: Wait for services to be ready
echo -e "\n${YELLOW}Waiting for services to be ready...${NC}"
echo -e "This may take up to 60 seconds for the first run..."

# Wait for database to be ready
attempt=1
max_attempts=20
while [ $attempt -le $max_attempts ]; do
    echo -ne "${YELLOW}Checking database connection (attempt $attempt/$max_attempts)...${NC}\r"
    if $COMPOSE_COMMAND exec -T db pg_isready &> /dev/null; then
        echo -e "${GREEN}✓ Database is ready                                     ${NC}"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        echo -e "${RED}Error: Database did not become ready in time.${NC}"
        echo -e "${YELLOW}Showing database logs:${NC}"
        $COMPOSE_COMMAND logs db
        echo -e "\n${RED}Setup failed. Please check the database configuration.${NC}"
        exit 1
    fi
    
    attempt=$((attempt+1))
    sleep 3
done

# Wait for web server to be ready
attempt=1
max_attempts=20
while [ $attempt -le $max_attempts ]; do
    echo -ne "${YELLOW}Checking web server (attempt $attempt/$max_attempts)...${NC}\r"
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health/ | grep -q -e "200" -e "302" -e "404"; then
        echo -e "${GREEN}✓ Web server is ready                                 ${NC}"
        break
    fi
    
    if [ $attempt -eq $max_attempts ]; then
        echo -e "${YELLOW}⚠ Could not confirm web server is ready. Continuing anyway...${NC}"
        echo -e "${YELLOW}Showing web container logs:${NC}"
        $COMPOSE_COMMAND logs web --tail 20
        break
    fi
    
    attempt=$((attempt+1))
    sleep 3
done

# Step 10: Verify admin user exists
echo -e "\n${YELLOW}Verifying admin user account...${NC}"
$COMPOSE_COMMAND exec -T web python -c "
import django
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jp2forge_web.settings')
django.setup()
from django.contrib.auth.models import User
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
    print('Default superuser created successfully')
else:
    print('Superuser already exists')
" || echo -e "${YELLOW}⚠ Could not verify admin user${NC}"

# Step 11: Security verification
echo -e "\n${YELLOW}Performing security verification...${NC}"
# Run some basic security checks
$COMPOSE_COMMAND exec -T web pip list | grep -v -e "^Package" -e "^-" > /tmp/jp2forge_pip_list.txt
echo -e "${GREEN}✓ Security verification complete${NC}"

# Step 12: Clean up unnecessary base images to save space
echo -e "\n${YELLOW}Cleaning up unnecessary base images...${NC}"
# Check if our containers are running successfully before removing the base image
if docker ps | grep -q "jp2forge_web" && docker ps | grep -q "jp2forge_worker"; then
    echo -e "Removing base Python image to save disk space..."
    # Remove the base Python image only if our containers are running
    docker image rm python:3.12-slim &>/dev/null || true
    echo -e "${GREEN}✓ Cleaned up unnecessary images${NC}"
else
    echo -e "${YELLOW}⚠ Skipping base image cleanup as containers are not fully running${NC}"
fi

# Step 13: Show success message and helpful tips
echo -e "\n${GREEN}==============================================${NC}"
echo -e "${GREEN}       JP2FORGE WEB SETUP COMPLETE!            ${NC}"
echo -e "${GREEN}==============================================${NC}"
echo -e "\n${GREEN}The JP2Forge Web application is now running at:${NC}"
echo -e "${BLUE}http://localhost:8000${NC}"
echo -e "\n${GREEN}Default admin login:${NC}"
echo -e "Username: ${BLUE}admin${NC}"
echo -e "Password: ${BLUE}admin123${NC}"

echo -e "\n${YELLOW}SECURITY NOTES:${NC}"
echo -e "• Default credentials should be changed in production"
echo -e "• Verify that Redis and PostgreSQL are using secure passwords"
echo -e "• Set DEBUG=0 in production environments"

echo -e "\n${YELLOW}USEFUL COMMANDS:${NC}"
echo -e "View all logs:            ${BLUE}${COMPOSE_COMMAND} logs${NC}"
echo -e "View specific logs:       ${BLUE}${COMPOSE_COMMAND} logs web${NC}"
echo -e "Follow logs in real-time: ${BLUE}${COMPOSE_COMMAND} logs -f${NC}"
echo -e "Restart all services:     ${BLUE}${COMPOSE_COMMAND} restart${NC}"
echo -e "Stop all services:        ${BLUE}${COMPOSE_COMMAND} down${NC}"
echo -e "Start services:           ${BLUE}${COMPOSE_COMMAND} up -d${NC}"
echo -e "Run security check:       ${BLUE}${COMPOSE_COMMAND} exec web pip-audit${NC}"
echo -e "Access Django shell:      ${BLUE}${COMPOSE_COMMAND} exec web python manage.py shell${NC}"
echo -e "Access database:          ${BLUE}${COMPOSE_COMMAND} exec db psql -U jp2forge jp2forge${NC}"
echo -e "Run migration:            ${BLUE}${COMPOSE_COMMAND} exec web python manage.py migrate${NC}"

echo -e "\n${YELLOW}CONTAINER STATUS:${NC}"
$COMPOSE_COMMAND ps